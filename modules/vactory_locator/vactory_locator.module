<?php

/**
 * @file
 * Contains vactory_locator.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_help().
 */
function vactory_locator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the vactory_locator module.
    case 'help.page.vactory_locator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Map locator.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function vactory_locator_theme() {
  $theme = [];
  $theme['locator_entity'] = [
    'render element' => 'elements',
    'file'           => 'locator_entity.page.inc',
    'template'       => 'locator_entity',
  ];
  $theme['locator_entity_content_add_list'] = [
    'render element' => 'content',
    'variables'      => ['content' => NULL],
    'file'           => 'locator_entity.page.inc',
  ];
  $theme['vactory_locator'] = [
    'render element' => 'children',
  ];
  $theme['locator_pin'] = [
    'template'  => 'pin',
    'variables' => [
      'name'                               => '',
      'field_locator_info'                 => [],
      'field_locator_category_infos'       => [],
      'field_locator_country_1'            => '',
      'field_locator_city_1'               => '',
      'field_locator_additional_adress'    => '',
      'field_locator_zipcode'              => '',
      'field_locator_email'                => '',
      'field_locator_description'          => '',
      'field_locator_image'                => '',
      'field_locator_fax'                  => '',
      'field_locator_phone'                => '',
      'field_locator_autre'                => '',
      'field_locator_autre_2'              => '',
      'field_locator_autre_3'              => '',
    ],
  ];
  $theme['locator_search_list_element'] = [
    'template'  => 'search-list-element',
    'variables' => [
      'name'                               => '',
      'field_locator_info'                 => [],
      'field_locator_category'             => '',
      'field_locator_country_1'            => '',
      'field_locator_city_1'               => '',
      'field_locator_additional_adress'    => '',
      'field_locator_zipcode'              => '',
      'field_locator_email'                => '',
      'field_locator_description'          => '',
      'field_locator_image'                => '',
      'field_locator_fax'                  => '',
      'field_locator_phone'                => '',
      'field_locator_autre'                => '',
      'field_locator_autre_2'              => '',
      'field_locator_autre_3'              => '',
    ],
  ];
  $theme['map_block'] = [
    'variables' => [
      'content' => NULL,
      'url' => NULL,
      'enable_filter' => NULL,
    ],
    'template'  => 'map-block',
  ];

  $theme['locator_category_list'] = [
    'template'  => 'locator-category-list',
    'variables' => [
      'content' => NULL,
    ],
  ];

  $theme['locator_entity__vactory_locator'] = [
    'template'  => 'locator-entity--vactory-locator',
    'variables' => [
      'content' => NULL,
    ],
  ];

  $theme['views_view_fields__vactory_locator__agency_listing'] = [
    'base hook' => 'views_view_fields',
    'template' => 'locator-card',
  ];

  $theme['locator_entity__vactory_locator__full'] = [
    'base hook' => 'locator_entity',
    'template' => 'full',
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_locator_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  $suggestions[] = 'views_view_fields__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function vactory_locator_theme_suggestions_locator_entity(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#locator_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'locator_entity__' . $sanitized_view_mode;
  $suggestions[] = 'locator_entity__' . $entity->bundle();
  $suggestions[] = 'locator_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'locator_entity__' . $entity->id();
  $suggestions[] = 'locator_entity__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_migration_plugins_alter().
 */
function vactory_locator_migration_plugins_alter(array &$migrations) {
  if (
    isset($migrations['locator_items']) &&
    isset($migrations['locator_items']['source']['plugin']) &&
    $migrations['locator_items']['source']['plugin'] == 'csv'
  ) {
    // Change path of csv file used as source in locator_items migration.
    // The file uploaded by the config
    // form here admin/config/system/locator-csv-import.
    $src_csv_file = \Drupal::service('config.factory')
      ->getEditable('locator_migration.settings')
      ->get('csv_file_path');
    if ($src_csv_file) {
      $migrations['locator_items']['source']['path'] = $src_csv_file;
    }
    else {
      \Drupal::messenger()
        ->addMessage(t("The csv source file hasn't configured yet for <b>locator_items</b> migrate go to <em>/admin/config/system/locator-csv-import</em> to upload new file. Otherwise the <b>locator_items</b> migrate will use <b>locator_migrate/locator_items.csv</b> from vactory_locator module."), MessengerInterface::TYPE_WARNING);
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function vactory_locator_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() === 'vactory_locator' && ($view->current_display === 'vactory_locator_listing' || $view->current_display === 'vactory_locator_listing_agence')) {
    $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
    $entity_manager = \Drupal::service('entity_type.manager');
    $file_storage = $entity_manager->getStorage('file');
    $decode_data = Json::decode($output['#markup']->jsonSerialize());
    $current_lang_code = \Drupal::languageManager()
      ->getCurrentLanguage()
      ->getId();
    foreach ($decode_data as $key => $item) {
      if (isset($item) && !empty($item)) {
        $entity_loc_info = $view->result[$key]->_entity->get('field_locator_info')
          ->getValue();
        $decode_data[$key]['field_locator_info'] = [
          'lat' => $entity_loc_info[0]['lat'],
          'lon' => $entity_loc_info[0]['lon'],
        ];
        $image = $view->result[$key]->_entity->get('field_locator_image')
          ->getValue();
        if (isset($image[0]['target_id'])) {
          $mid = $image[0]['target_id'];
          $media = Media::load($mid);
          $fid = $media->getSource()->getSourceFieldValue($media);
          $file = $file_storage->load($fid);
          if ($file) {
            $wrapper = $stream_wrapper_manager->getViaUri($file->getFileUri());
            $decode_data[$key]['field_locator_image'] = $wrapper->getExternalUrl();
          }
        }

        // Add Category Marker, rendered item.
        $category_id = $decode_data[$key]['field_locator_category_1'];
        $decode_data[$key]['field_locator_category_infos']['id_category'] = $category_id;
        $decode_data[$key]['field_locator_category_infos']['label_category'] = $decode_data[$key]['field_locator_category'];

        if (!empty($category_id)) {
          $category_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
            ->loadByProperties([
              'vid' => 'locator_category',
              'tid' => $category_id,
            ]);
          if (isset($category_terms) && !empty($category_terms)) {
            $category_term = array_values($category_terms)[0];
            $translated_term = \Drupal::service('entity.repository')
              ->getTranslationFromContext($category_term, $current_lang_code);
            $url = '';
            if (isset($translated_term->get('field_locator_map_marker')->getValue()[0]['target_id'])) {
              $media_id = $translated_term->get('field_locator_map_marker')->getValue()[0]['target_id'];
              $media = Media::load($media_id);
              $fid = $media->get('field_media_image')[0]->get('target_id')->getValue();
              $file = $file_storage->load($fid);
              if ($file) {
                $url = \Drupal::service('file_url_generator')->transformRelative(\Drupal::service('stream_wrapper_manager')->getViaUri($file->getFileUri())->getExternalUrl());
              }
            }
            $width = (isset($translated_term->get('field_locator_marker_height')->getValue()[0]['value'])) ? $translated_term->get('field_locator_marker_height')->getValue()[0]['value'] : '';
            $height = (isset($translated_term->get('field_locator_marker_width')->getValue()[0]['value'])) ? $translated_term->get('field_locator_marker_width')->getValue()[0]['value'] : '';
            $decode_data[$key]['field_locator_category_infos']['marker']['marker_url'] = $url;
            $decode_data[$key]['field_locator_category_infos']['marker']['marker_height'] = $height;
            $decode_data[$key]['field_locator_category_infos']['marker']['marker_width'] = $width;
          }
        }
        // Remove category id and category label from results.
        unset($decode_data[$key]['field_locator_category_1']);
        unset($decode_data[$key]['field_locator_category']);
        // Add pin, rendered item.
        $decode_data[$key]['pin'] = _rendered_pin($decode_data[$key], 'locator_pin');
        $decode_data[$key]['search_list_element'] = _rendered_pin($decode_data[$key], 'locator_search_list_element');

      }
    }

    $data = [
      'results'    => $decode_data,
      'total_rows' => $view->total_rows,
    ];

    $output['#markup'] = Json::encode($data);
    // $output['#plain_text'] = Json::encode($data);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_locator_preprocess_map_block(&$variables) {
  $current_lang_code = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadTree('locator_category');
  $terms_info = [];
  if (isset($terms) && !empty($terms)) {
    foreach ($terms as $key => $term) {
      $term = Term::load($term->tid);
      $translated_term = \Drupal::service('entity.repository')
        ->getTranslationFromContext($term, $current_lang_code);
      $terms_info[] = [
        'name' => $translated_term->getName(),
        'tid'  => $translated_term->id(),
      ];
    }
  }

  $variables['content']['terms'] = $terms_info;
}

/**
 * Render Pin Data lat, lon, name, description.
 *
 * @param array $data
 *   (Item Data lat, lon, name, description .....)
 *
 * @return array
 *   Rendered HTML Item.
 */
function _rendered_pin(array $data, $theme) {

  // Add prefix # to data keys.
  $data = array_combine(
    array_map(function ($key) {
      return '#' . $key;
    }, array_keys($data)),
    $data
  );
  // Locator pin template.
  $localisation_theme = [
    // '#theme' => 'locator_pin',.
    '#theme' => $theme,
  ];
  // Merge data with template.
  $result = array_merge($localisation_theme, $data);

  // Render the template to HTML.
  $marker = \Drupal::service('renderer')->renderPlain($result);

  return $marker;
}

/**
 * Implements hook_form_alter().
 */
function vactory_locator_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    isset($form_id) &&
    in_array($form_id, [
      'locator_entity_vactory_locator_add_form',
      'locator_entity_vactory_locator_edit_form',
    ])
  ) {
    $form['field_locator_country']['widget']['#ajax'] = [
      'callback' => 'get_cities',
      'event' => 'change',
      'wrapper' => 'locator_city_selector',
    ];
    $form['field_locator_city']['#prefix'] = '<div id="locator_city_selector">';
    $form['field_locator_city']['#suffix'] = '</div>';
    $form['field_locator_city']['widget']['#limit_validation_errors'] = [];

    // Set city and country of the agency in edit form.
    if ($form_id == 'locator_entity_vactory_locator_edit_form') {
      $country_id = !empty($form_state->getValue('field_locator_country')) ? $form_state->getValue('field_locator_country')[0]['target_id'] : NULL;
      $form_country_id = isset($form['field_locator_country']['widget']['#default_value'][0]) ? $form['field_locator_country']['widget']['#default_value'][0] : NULL;
      $form['field_locator_city']['widget']['#options'] = !$country_id ? get_city_options($form_country_id) : get_city_options($country_id);
    }
  }
}

/**
 * Callback : Get all cities of selected country.
 */
function get_cities($form, FormStateInterface $form_state) {
  $country_id = $form_state->getValue('field_locator_country')[0]['target_id'];
  $options = get_city_options($country_id);

  // Affect received cities to city selectBox.
  $form['field_locator_city']['widget']['#options'] = $options;
  $form['field_locator_city']['widget']['#default_value'] = array_keys($options)[0];
  $form['field_locator_city']['#prefix'] = '<div id="locator_city_selector">';

  // Escape validation error for city select.
  $form['field_locator_city']['widget']['#limit_validation_errors'] = [];
  $form['field_locator_city'];
  return $form['field_locator_city'];
}

/**
 * Get city options of the country.
 */
function get_city_options($country_id) {
  $vid = 'locator_city';
  $city_options = ['_none' => '- None -'];
  if ($country_id) {
    $citiesOfCountry = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => $vid, 'field_locator_country' => $country_id]);
    if (isset($citiesOfCountry) && !empty($citiesOfCountry)) {
      // Add name of the city.
      $city_options = array_map(function ($city) {
        return $city->label();
      }, $citiesOfCountry);
    }
  }
  return $city_options;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_locator_preprocess_views_view_fields__vactory_locator__agency_listing(&$variables) {
  $locator = $variables['row']->_entity;
  $locator_name = $locator->getName();
  $locator_name = str_replace('-', '_', $locator_name);
  $locator_name = str_replace(' ', '-', $locator_name);
  $config = \Drupal::config('vactory_locator.settings');
  $prefix = !empty($config->get('path_url')) ? trim($config->get('path_url'), '/') : 'locator';
  $variables['locator_path'] = '/' . $prefix . '/' . $locator_name;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vactory_locator_locator_entity_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'vactory_locator') {
    if (empty($entity->get('field_locator_path_alias')->value)) {
      $name = trim($entity->get('name')->value);
      $entity->set('name', $name);
      $name = str_replace([' ', "'"], '-', $name);
      $path_alias = filter_var($name, FILTER_SANITIZE_SPECIAL_CHARS);
      $locator_storage = Drupal::entityTypeManager()->getStorage('locator_entity');
      $path_alias = generate_locator_path_alias($locator_storage, $path_alias, $path_alias, $entity, 0);
      $entity->set('field_locator_path_alias', $path_alias);
    }
  }
}

/**
 * Generate recursively path alias from locator name.
 */
function generate_locator_path_alias($locator_storage, $locator_path_alias_oroginal, $locator_path_alias, $locator_entity, $index) {
  $locator_entities = $locator_storage->loadByProperties(['field_locator_path_alias' => $locator_path_alias]);
  if (empty($locator_entities)) {
    return $locator_path_alias;
  }
  if (!empty($locator_entities) && count($locator_entities) === 1 && array_keys($locator_entities)[0] == $locator_entity->id()) {
    return $locator_path_alias;
  }

  return generate_locator_path_alias($locator_storage, $locator_path_alias_oroginal, $locator_path_alias_oroginal . '-' . $index, $locator_entity, $index + 1);
}

function vactory_locator_df_jsonapi_output_alter(&$content) {
  if ($content['template'] == 'vactory_locator:default'){

  $config = \Drupal::config('vactory_locator.settings');

  $map_api_key = $config->get('map_api_key');
  $marker = $config->get('locator_default_marker_url');
  $content['config']['map_api_key'] = $map_api_key;
  $content['config']['marker'] = $marker;


  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['vid' => 'locator_category']);
  $categories = [];
  foreach ($terms as $term) {
    $categories[] = [
      "uuid" => $term->get('uuid')->value,
      "name" => $term->getName(),
    ];
  }
  $content['categories'] = $categories;
  }

}
