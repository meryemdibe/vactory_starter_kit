<?php

/**
 * @file
 * Module related hooks.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_theme().
 */
function vactory_forums_theme($existing, $type, $theme, $path) {
  return [
    'node__vactory_forum__full' => [
      'base hook' => 'node',
      'template' => 'full',
    ],
    'node__vactory_forum__card_inline' => [
      'base hook' => 'node',
      'template' => 'card-inline',
    ],
    'node__vactory_forum__smart_search' => [
      'base hook' => 'node',
      'template' => 'smart-search',
    ],
    'node__vactory_forum__mur' => [
      'base hook' => 'node',
      'template' => 'mur',
    ],
    'views_view_table__vactory_forums' => [
      'base hook' => 'views_view_table',
      'template' => 'vactory-forums-view-table',
    ],
    'views_view_field__last_comment_name' => [
      'base hook' => 'views_view_field',
      'template' => 'vactory-forums-last-comment-author',
    ],
    'views_view_field__field_vactory_forum_status' => [
      'base hook' => 'views_view_field',
      'template' => 'vactory-forums-status',
    ],
    'views_view_field__field_vactory_forum_room' => [
      'base hook' => 'views_view_field',
      'template' => 'vactory-forums-room',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vactory_forums_node_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'vactory_forum') {
    $comment = $entity->get('comment')->getValue();
    if ($entity->get('field_vactory_forum_status')->value == "1") {
      $comment[0]['status'] = 2;
    }
    else {
      $comment[0]['status'] = 1;
    }
    $entity->set('comment', $comment);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_forums_theme_suggestions_views_view_table_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_table__' . $variables['view']->id();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_forums_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_field__' . $variables['field']->field;
}

/**
 * Implements hook_preprocess_hook().
 */
function vactory_forums_preprocess_node__vactory_forum__full(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];
    $has_access = user_has_acces_to_forum($node);
    if (!$has_access) {
      throw new NotFoundHttpException();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function vactory_forums_views_pre_render(ViewExecutable $view) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $routes = [
    'view.vactory_forums.page_forum_table',
    'view.vactory_forums.page_forums_listing_card',
  ];

  if (in_array($route_name, $routes)) {
    foreach ($view->result as $key => $result) {
      $node = $result->_entity;
      $has_access = user_has_acces_to_forum($node);
      if (!$has_access) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Check if user has access to such forum.
 */
function user_has_acces_to_forum($node) {
  if ($node instanceof NodeInterface && $node->hasField('field_groupe_utilisateurs') && !empty($node->get('field_groupe_utilisateurs'))) {
    $tids = $node->get('field_groupe_utilisateurs')->getValue();
    $tids = array_values($tids);
    $users_groups = [];
    if (!empty($tids)) {
      foreach ($tids as $t) {
        $tid = $t['target_id'];
        // Load users.
        $users = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
          'vid' => 'users_groups',
          'tid' => $tid,
        ]);
        $users = array_values($users);
        foreach ($users as $key => $user) {
          $users_tax = $user->get('field_vactory_utilisateurs')->getValue();
          foreach ($users_tax as $u) {
            if (!in_array($u['target_id'], $users_groups)) {
              array_push($users_groups, $u['target_id']);
            }
          }
        }
      }
      $current_user = \Drupal::currentUser();
      if (!$current_user->isAnonymous() && !in_array('administrator', $current_user->getRoles())) {
        $user_id = $current_user->id();
        if (!in_array($user_id, $users_groups)) {
          return FALSE;
        }
      }
    }
  }
  return TRUE;
}

/**
 * Implements hook_json_api_collection_alter().
 */
function vactory_forums_json_api_collection_alter(&$filters, &$context) {
  if ($context['id'] === 'vactory_forums_list') {
    $query = \Drupal::request()->query->get("q");

    if (isset($query["page"])) {
      $filters["page[offset]"] = intval($query["page"]) > 0 ? (intval($query["page"]) - 1) * $filters["page[limit]"] : 0;
    }

    if (isset($query["sort"]) && in_array(strtolower($query["sort"]), ["asc", "desc"])) {
      $filters["sort[sort-vactory-date][direction]"] = strtolower($query["sort"]);
    }

    if (isset($query["room"]) && $query["room"] !== "all") {
      $room = $query["room"];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_forum_room',
        'term_2_slug' => $room,
      ]);

      if (!$terms) {
        throw new \Exception("[Forums - hook_json_api_collection_alter] term '$room' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[internal_room][condition][path]"] = "field_vactory_forum_room.drupal_internal__tid";
        $filters["filter[internal_room][condition][operator]"] = "=";
        $filters["filter[internal_room][condition][value]"] = $id;
      }

    }
  }

  if ($context['id'] === 'vactory_forums_list_with_filters') {
    $query = \Drupal::request()->query->get("q");

    $pageLimit = isset($filters["page[limit]"]) ? $filters["page[limit]"] : 10;

    if (isset($query["page"])) {
      $filters["page[offset]"] = intval($query["page"]) > 0 ? (intval($query["page"]) - 1) * $pageLimit : 0;
    }

    if (isset($query["sort"]) && in_array(strtolower($query["sort"]), ["asc", "desc"])) {
      $filters["sort[sort-created][path]"] = "created";
      $filters["sort[sort-created][direction]"] = strtolower($query["sort"]);
    }

    if (isset($query["search"]) && $query["search"] !== "") {
      $filters["filter[forum-title][condition][path]"] = "title";
      $filters["filter[forum-title][condition][operator]"] = "CONTAINS";
      $filters["filter[forum-title][condition][value]"] = $query["search"];
    }

    if (isset($query["status"]) && $query["status"] !== "" && $query["status"] !== "all") {
      $filters["filter[forum-status][condition][path]"] = "field_vactory_forum_status";
      $filters["filter[forum-status][condition][operator]"] = "=";
      $filters["filter[forum-status][condition][value]"] = $query["status"];
    }

    if (isset($query["theme"]) && $query["theme"] !== "all") {
      $thematic = $query["theme"];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_forums_thematic',
        'term_2_slug' => $thematic,
      ]);

      if (!$terms) {
        throw new \Exception("[Forums - hook_json_api_collection_alter] term '$thematic' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[forum-theme][condition][path]"] = "field_vactory_forums_thematic.drupal_internal__tid";
        $filters["filter[forum-theme][condition][operator]"] = "=";
        $filters["filter[forum-theme][condition][value]"] = $id;
      }

    }
  }

}

/**
 * Implements hook_decoupled_df_format_alter.
 */
function vactory_forums_decoupled_df_format_alter(&$value, $info, CacheableMetadata &$cacheability) {
  if ($info['type'] === 'json_api_section_forums' && !empty($value)) {
    $config['resource'] = $value['resource'] ?? '';
    $config['filters'] = is_string($value['filters']) ? explode("\n", $value['filters']) : $value['filters'];
    $config['vocabularies'] = [];
    $config['filters'][] = 'filter[forum-room-filter][condition][path]=field_vactory_forum_room.drupal_internal__tid';
    $config['filters'][] = 'filter[forum-room-filter][condition][operator]=%3D';
    $config['filters'][] = 'filter[forum-room-filter][condition][value]=' . $value['room'];
    $response = \Drupal::service('vactory_decoupled.jsonapi.generator')->fetch($config);
    $cache = $response['cache'];
    unset($response['cache']);

    $cacheTags = Cache::mergeTags($cacheability->getCacheTags(), $cache['tags']);
    $cacheability->setCacheTags($cacheTags);
    // Load room title.
    $room = Term::load($value['room']);
    if (isset($room)) {
      $room_translated = \Drupal::service('entity.repository')->getTranslationFromContext($room);
      $room_title = $room_translated->getName();
      $room_slug = $room_translated->get("term_2_slug")->getString();
      $value['room'] = [
        'title' => $room_title,
        'slug' => $room_slug,
      ];
    }
    $value['response'] = $response;
  }

}
