<?php

use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

/**
 * Implements hook_theme().
 */
function vactory_blog_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_blog__card' => [
      'base hook' => 'node',
      'template' => 'card',
    ],
    // Node > card inline.
    'node__vactory_blog__card_inline' => [
      'base hook' => 'node',
      'template' => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_blog__masonry' => [
      'base hook' => 'node',
      'template' => 'masonry',
    ],
    // Node > full.
    'node__vactory_blog__full' => [
      'base hook' => 'node',
      'template' => 'full',
    ],
    // Node > Smart search.
    'node__vactory_blog__smart_search' => [
      'base hook' => 'node',
      'template' => 'smart-search',
    ],
    // Node > mur.
    'node__vactory_blog__mur' => [
      'base hook' => 'node',
      'template' => 'mur',
    ],
  ];
}

/**
 * Implements hook_json_api_collection_alter().
 */
function vactory_blog_json_api_collection_alter(&$filters, &$context) {
  if ($context['id'] === 'vactory_blog_list') {
    $query = \Drupal::request()->query->get("q");

    if (isset($query["page"])) {
      $filters["page[offset]"] = intval($query["page"]) > 0 ? (intval($query["page"]) - 1) * $filters["page[limit]"] : 0;
    }
    if (isset($query["theme"]) && $query["theme"] !== "all") {
      $theme = $query["theme"];
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'vid' => 'vactory_blog_categories',
          'term_2_slug' => $query["theme"],
        ]);

      if (!$terms) {
        throw new \Exception("[Blog - hook_json_api_collection_alter] term '$theme' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[blog_internal_category][condition][path]"] = "field_blog_category.drupal_internal__tid";
        $filters["filter[blog_internal_category][condition][operator]"] = "=";
        $filters["filter[blog_internal_category][condition][value]"] = $id;
      }

    }
    if (isset($query["tag"]) && $query["tag"] !== "all") {
      $theme = $query["tag"];
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'vid' => 'vactory_blog_tags',
          'term_2_slug' => $query["tag"],
        ]);

      if (!$terms) {
        throw new \Exception("[Blog - hook_json_api_collection_alter] term '$theme' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[blog_internal_tag][condition][path]"] = "field_blog_tags.drupal_internal__tid";
        $filters["filter[blog_internal_tag][condition][operator]"] = "=";
        $filters["filter[blog_internal_tag][condition][value]"] = $id;
      }

    }
  }
}


/**
 * A custom hook to alter the node access.
 *
 * @param array $normalized_node
 *   An array that contains normalized node fields to be altered.
 * @param string $context
 *   Extra data has two keys:
 *     node: the related node object.
 *     node_type: the related node content type machine name.
 * @param string $base_node_type
 *   Base node content type machine name.
 */
function vactory_blog_jsonapi_vcc_normalized_node_alter(&$normalized_node, $context, $base_node_type) {
  if ($base_node_type === 'vactory_blog') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $context['node'];
    $node_type = $context['node_type'];
    if ($node_type === 'vactory_blog') {
      // Get image.
      $lqipImageStyle = ImageStyle::load('lqip');
      $output_field_name = 'field_vactory_media';
      $mid = $node->get($output_field_name)->getString();
      $result[$output_field_name] = NULL;
      if (!empty($mid)) {
        $mid = (int) $mid;
        $media = Media::load($mid);
        if (
          $media &&
          $media->bundle() === 'image' &&
          isset($media->get('field_media_image')->getValue()[0]['target_id'])
        ) {
          $fid = $media->get('field_media_image')->getValue()[0]['target_id'];
          $file = File::load($fid);
          if ($file != NULL) {
            $uri = $file->getFileUri();
            $fileResult = [];
            $media_file_manager = \Drupal::service('vacory_decoupled.media_file_manager');
            $fileResult['_default'] = $media_file_manager->getMediaAbsoluteUrl($uri);
            $fileResult['_lqip'] = $media_file_manager->convertToMediaAbsoluteUrl($lqipImageStyle->buildUrl($uri));
            $fileResult['uri'] = StreamWrapperManager::getTarget($uri);
            $fileResult['fid'] = $fid;
            $fileResult['file_name'] = $media->label();
            $fileResult['meta'] = $media->get('field_media_image')
              ->first()
              ->getValue();
            $result[$output_field_name] = $fileResult;
          }
        }

      }


      // Get term.
      $term_field_name = 'field_blog_category';
      $news_term_tid = $node->get($term_field_name)->target_id ?? NULL;
      $term = '';
      if ($news_term_tid != NULL) {
        $new_term = Term::load($news_term_tid);
        if ($new_term != NULL) {
          $new_term_trans = $term = \Drupal::service('entity.repository')
            ->getTranslationFromContext($new_term);
          $term = [
            'name' => $new_term_trans->label(),
            'slug' => $new_term_trans->get('term_2_slug')->value ?? '',
          ];
        }
      }

      $normalized_node = [
        'id' => $node->id(),
        'image' => $result[$output_field_name],
        'tag' => $term,
        'title' => $node->label(),
        'excerpt' => $node->get('field_vactory_excerpt')->getValue(),
        'url' => $node->toUrl()->toString(),
      ];

    }
  }
}
