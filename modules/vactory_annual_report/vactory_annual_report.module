<?php

/**
 * @file
 * Module File.
 */

use Drupal\Component\Utility\Xss;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_theme().
 */
function vactory_annual_report_theme($existing, $type, $theme, $path) {
  $path_resolver = \Drupal::service('extension.path.resolver');
  return [
    // Node, Card.
    'node__vactory_annual_report__card'             => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > full.
    'node__vactory_annual_report__full'             => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
    // Node > Smart search.
    'node__vactory_annual_report__smart_search'        => [
      'base hook' => 'node',
      'template'  => 'smart-search',
    ],
    // Node > Mur.
    'node__vactory_annual_report__mur'        => [
      'base hook' => 'node',
      'template'  => 'mur',
    ],
    // Views, unformatted List.
    'views_view_unformatted__annual_report'         => [
      'base hook' => 'views_view_unformatted',
    ],
    // Views view.
    'views_view__annual_report'                     => [
      'base hook' => 'views_view',
    ],
    // Thematic Filter Links.
    'vactory_annual_report_filter_links_thematic'   => [
      'template'  => 'filter-thematic-links',
      'variables' => [
        'links'          => [],
        'filter_name'    => '',
        'filter_current' => 'All',
      ],
    ],
    // Media Type Filter Links.
    'vactory_annual_report_filter_links_media_type' => [
      'template'  => 'filter-media-type-links',
      'variables' => [
        'links'          => [],
        'filter_name'    => '',
        'filter_current' => 'All',
      ],
    ],
    // Filter container.
    'vactory_annual_report_filter_container'        => [
      'template'  => 'filter-container',
      'variables' => [
        'thematic'   => [],
        'media_type' => [],
      ],
    ],
    "node__vactory_annual_report__card__background_with_content" => [
      'base hook' => 'node',
      "template" => "component--background-with-content",
      "path" => $path_resolver->getPath('module', 'vactory_annual_report') . '/templates/components',
    ],
    "node__vactory_annual_report__card__background" => [
      'base hook' => 'node',
      "template" => "component--background",
      "path" => $path_resolver->getPath('module', 'vactory_annual_report') . '/templates/components',

    ],
    "node__vactory_annual_report__card__key_number" => [
      'base hook' => 'node',
      "template" => "component--key-number",
      "path" => $path_resolver->getPath('module', 'vactory_annual_report') . '/templates/components',

    ],
    "node__vactory_annual_report__card__key_number_with_text" => [
      'base hook' => 'node',
      "template" => "component--key-number-with-text",
      "path" => $path_resolver->getPath('module', 'vactory_annual_report') . '/templates/components',
    ],
    "block_thematique_filter_block" => [
      "template" => 'block-filter-thematic-links',
      "variables" => [
        "content" => [],
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_annual_report_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#node'])) {
    $node = $variables['elements']['#node'];
    $content_type = $node->bundle();
    if ($content_type === 'vactory_annual_report'
      && array_key_exists('#view_mode', $variables['elements'])) {
      if ($variables['elements']['#view_mode'] == 'full') {
        $suggestions[] = 'node__vactory_annual_report__full';
      }
      elseif ($variables['elements']['#view_mode'] == 'card') {
        $layout_type = $node->field_ar_layout[0]->value ?? '';
        $suggestions[] = 'node__vactory_annual_report__card__' . $layout_type;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function vactory_annual_report_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'annual_report')) {
    // Add muuri library to annual report view.
    $view->element['#attached']['library'][] = 'vactory_annual_report/vactory_annual_report.muuri_grid';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_annual_report_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $view = $variables['view'] ?? NULL;
  if ($view) {
    // Add suggestion without display name to use it in the all displays.
    $suggestions[] = 'views_view_unformatted__' . $view->id();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_annual_report_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];

  if ($view->id() !== 'annual_report') {
    return;
  }

  $rows = $variables['rows'] ?? [];
  foreach ($rows as $key => $row) {
    /** @var \Drupal\node\Entity\Node $node */
    /* $node = $row['content']['#node'];
    if ($node instanceof NodeInterface &&
    $node->hasField('field_ar_element_width')) {
    // Add the width class.
    $variables['rows'][$key]['width_class'] =
    $node->get('field_ar_element_width')->value ?? NULL;
    }*/
  }
}

/**
 * Implements template_preprocess_form_element().
 *
 * Hide select.
 */
function vactory_annual_report_preprocess_form_element(&$variables) {
  $element = &$variables['element'];
  if (!isset($element['#name'])) {
    return;
  }

  if (
    $element['#name'] === 'field_ar_thematic_target_id' ||
    $element['#name'] === 'field_ar_media_type_target_id') {
    $variables['attributes']['class'] = ['d-none'];
  }
}

/**
 * Implemnts hook_preprocess_views_exposed_form().
 */
function vactory_annual_report_preprocess_views_exposed_form(&$variables) {
  if ($variables['form']['#id'] == 'views-exposed-form-annual-report-digital-report-listing-page') {
    $year = Drupal::routeMatch()->getParameters()->get('arg_0');
    if (!empty($year)) {
      $years = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')
        ->loadByProperties([
          'vid' => 'rapport_digital_annees',
          'name' => $year,
        ]);
      if (empty($years)) {
        throw new NotFoundHttpException();
      }
    }
    $request = Drupal::request()->request->get('field_ar_thematic_target_id');
    if (isset($request) and !empty($request)) {
      $term_selected = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')
        ->loadByProperties([
          'vid' => 'vactory_ar_thematic',
          'tid' => $request,
        ]);
      $parent_id = $term_selected[$request]->parent[0]->target_id;
      $parent = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_ar_thematic',
        'tid' => $parent_id,
      ]);
      $year = $parent[$parent_id]->get('name')->value;
    }
    $vid = 'vactory_ar_thematic';
    $terms = \Drupal::service('vactory_annual_report.manager')->load($vid);
    $terms = array_values($terms);
    $data = [
      'All' => $variables['form']['digital_report_filter']['#thematic']['#links']['All'],
    ];
    if (isset($terms) &&!empty($terms)) {
      foreach ($terms as $term) {
        if ($term->name == $year) {
          foreach ($term->children as $key => $child) {
            $data[$key] = $child->name;
          }
        }
      }
    }
    $variables['form']['digital_report_filter']['#thematic']['#links'] = $data;
  }
}

/**
 * Implements hook_form_alter().
 */
function vactory_annual_report_form_alter(&$form, $form_state, $form_id) {
  // Apply the form_alter to a specific form #id
  // the form #id can be found through inspecting the markup.
  if (strpos($form['#id'], "views-exposed-form-annual-report") === 0) {
    // Include a js and css, which was defined in libraries.yml.
    $form['#attached']['library'][] = 'vactory_annual_report/vactory_annual_report.views_filter_links';
    // Hide submit button.
    $form['actions']['submit']['#attributes']['class'][] = 'd-none';
    // Get current items.
    $current_thematic = ((int) \Drupal::request()->get('field_ar_thematic_target_id') ?? 'All');
    $current_media_type = ((int) \Drupal::request()->get('field_ar_media_type_target_id') ?? 'All');
    $form['digital_report_filter'] = [
      '#theme'      => 'vactory_annual_report_filter_container',
      '#thematic'   => [
        '#theme'          => 'vactory_annual_report_filter_links_thematic',
        '#links'          => $form['field_ar_thematic_target_id']['#options'],
        '#filter_name'    => 'field_ar_thematic_target_id',
        '#filter_current' => $current_thematic,
      ],
      '#media_type' => [
        '#theme'          => 'vactory_annual_report_filter_links_media_type',
        '#links'          => (isset($form['field_ar_media_type_target_id']['#options']) ? $form['field_ar_media_type_target_id']['#options'] : []),
        '#filter_name'    => 'field_ar_media_type_target_id',
        '#filter_current' => $current_media_type,
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_annual_report_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  if ($node->getType() !== 'vactory_annual_report') {
    return;
  }

  $view = &drupal_static(__FUNCTION__);
  if (!isset($view)) {
    $view = Views::getView('annual_report');
    $view->setDisplay('digital_report_listing_page');
  }

  $term_thematic_id = (int) $node->get('field_ar_thematic')
    ->first()
    ->getString();

  /** @var \Drupal\Core\Url $view_url */
  $view_url = $view->getUrl();
  $view_url->setRouteParameter('field_ar_thematic_target_id', $term_thematic_id);

  $variables['content']['thematic_link'] = $view_url;
  //
  //  // Image.
  //  if ($node->get('field_vactory_media')->first()) {
  //  $variables['content']['field_vactory_media'] =
  // (int) $node->get('field_vactory_media')
  // ->first()
  // ->getString();
  // }
  // else {
  // $variables['content']['field_vactory_media'] = NULL;
  // }.
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_annual_report_preprocess_vactory_annual_report_filter_links_media_type(&$variables) {
  // Get links list.
  $links = $variables['links'];
  foreach ($links as $tid => $link) {
    if ($tid === 'All') {
      continue;
    }
    // Get media type.
    $media_link = Term::load($tid);
    // Get css classes.
    $link_icon_class = Xss::filter($media_link->get('field_media_type_css_class')->value);
    // Change links vars, add classes.
    $variables['links'][$tid] = [
      't_name'     => $link,
      'icon_class' => $link_icon_class,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_annual_report_preprocess_vactory_annual_report_filter_links_thematic(&$variables) {
  // Get links list.
  $thematic = $variables['links'];
  foreach ($thematic as $tid => $theme) {
    if ($tid === 'All') {
      continue;
    }
    // Get media type.
    $theme_term = Term::load($tid);
    // Get css classes.
    $bg_color = Xss::filter($theme_term->get('field_color')->value);
    // Change links vars, add classes.
    $variables['links'][$tid] = [
      'name'     => $theme,
      'bg_color' => $bg_color,
    ];
  }
}
