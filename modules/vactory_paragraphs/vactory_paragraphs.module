<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme().
 */
function vactory_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__vactory_paragraph_block' => [
      'base hook' => 'paragraph',
      'template'  => 'paragraph--vactory-paragraph-block',
    ],
    'paragraph__vactory_component'       => [
      'base hook' => 'paragraph',
      'template'  => 'paragraph--vactory-component',
    ],
    'paragraph__vactory_paragraph_multi_template'       => [
      'base hook' => 'paragraph',
      'template'  => 'paragraph--vactory-paragraphs-multi-template',
    ],
    'paragraph__views_reference' => [
      'base hook' => 'paragraph',
      'template'  => 'paragraph--views-reference',
    ],
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_paragraphs_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'paragraph') {

    $fields['paragraph_identifier'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Paragraph ID'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    // @See vactory_paragraphs/templates/paragraph--vactory-paragraph-block.html.twig
    $fields['paragraph_container'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Width'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setRequired(TRUE)
      ->setDefaultValue('narrow_width')
      ->setSetting('allowed_values', [
        'full_width'   => 'Full Width',
        'narrow_width' => 'Narrow Width',
        'no_container' => 'No Container',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'options_select',
        'weight' => -10,
      ]);

    $fields['container_spacing'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Spacing'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      //->setRequired(TRUE)
      ->setDefaultValue('small_space')
      ->setSetting('allowed_values', [
        'small_space'   => 'Small space',
        'big_space' => 'Big space',
        'no_space' => 'No spacing',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'options_select',
        'weight' => -10,
      ]);

    $css_class_description = '<br> <strong> my-X  </strong> : ( marges varticles ) <br>';
    $css_class_description .= '<strong> py-X </strong> :  ( paddings verticales ) <br>';
    $css_class_description .= '<strong> NB: </strong> : A noter X peut prendre une valeur de 0 à 5 <br><br>';
    $css_class_description .= '<strong> bg-custom-filter-X </strong> : la classe pour filter opaque  <br>';
    $css_class_description .= '<strong> NB: </strong> : A noter X peut prendre une valeur de 0 à 100 par un pas de 10 <br>';

    $fields['paragraph_css_class'] = BaseFieldDefinition::create('string')
      ->setLabel(t('CSS class(es)'))
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 35,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE)
      ->setDescription($css_class_description);

    $fields['paragraph_background_image'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Image'))
      ->setDescription(t('Set a background image.'))
      ->setSetting('target_type', 'media')
      ->setSetting('handler_settings', ['target_bundles' => ['image' => 'image']])
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'media_library_widget',
        'weight' => 45,
      ]);

    $fields['paragraph_background_parallax'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Activer parallax'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 45,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function vactory_paragraphs_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->get('paragraph_identifier')->value != NULL) {
    $identifier = Html::cleanCssIdentifier($paragraph->get('paragraph_identifier')->value);
  }
  else {
    $title = ($paragraph->hasField('field_titre_ancre') && !empty($paragraph->get('field_titre_ancre')
      ->getValue())) ? $paragraph->get('field_titre_ancre')->value : $paragraph->field_vactory_title->value;
    $identifier = Html::cleanCssIdentifier($title . '-' . $paragraph->id());
  }
  $variables['attributes']['id'] = strtolower($identifier);
  $class_css = $paragraph->get('paragraph_css_class')->getString();

  if (!empty($class_css)) {
    $variables['attributes']['class'][] = $class_css;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function vactory_paragraphs_field_widget_entity_reference_paragraphs_form_alter(&$elements, FormStateInterface $form_state, array $context) {
  if (!isset($elements['subform']['field_titre_ancre'])) {
    return;
  }

  // Get paragraph field name.
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();

  $elements['subform']['field_titre_ancre']['#states'] = [
    'invisible' => [
      ':input[name="' . $field_name . '[' . $context['delta'] . '][subform][field_vactory_flag_2][value]"]' => ['checked' => FALSE],
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function vactory_paragraphs_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_name = !empty($context['items']->getName()) ? $context['items']->getName() : '';
  if (!empty($field_name) && $field_name == 'field_views_reference') {
    views_reference_remove_disabled_views($element['target_id']['#options']);
    $element['target_id']['#ajax']['callback'] = 'views_reference_get_enabled_displays';
    $element['display_id']['#prefix'] = '<div id="' . implode('_', $element['target_id']['#field_parents']) . '">';
    $element['display_id']['#suffix'] = '</div>';
  }
  if (!empty($field_name) && $field_name == 'field_background_color') {
    $color = $element['color']['#default_value'];
    $element['color']['#default_value'] = isset($color) && !empty($color) && $color != '#FFFFFF' ? $color : '#FF0000';
  }
  if (!empty($field_name) && $field_name == 'container_spacing') {
    $element['#default_value'] = isset($element['#default_value']) && !empty($element['#default_value']) ? $element['#default_value'] : 'small_space';
  }
  if (isset($context['form']['#entity_type']) && $context['form']['#entity_type'] == 'paragraph') {
    if (isset($element['#field_parents']) && in_array('field_vactory_paragraph_tab', $element['#field_parents'], TRUE)) {
      if ($element['#title'] instanceof TranslatableMarkup && $element['#title']->getUntranslatedString() == 'Paragraph ID') {
        $element['value']['#title'] = t('Tab ID');
        $element['value']['#description'] = t('Set the HTML ID attribute value, useful to enhance CSS selectors for current tab (Default to "TabTitle-ParagraphID").');
      }
    }
    // Hide paragraph anchor title field and anchor title display checkbox
    // button while vactory_anchor module is disabled.
    if (!empty($field_name) && in_array($field_name, ['field_vactory_flag_2', 'field_titre_ancre'])) {
      $module_handler = Drupal::service('module_handler');
      if (!$module_handler->moduleExists('vactory_anchor')) {
        $element = NULL;
      }
    }
  }
  if (!empty($field_name) && $field_name == 'field_vactory_paragraphs') {
    if (isset($element['top']['paragraph_summary'])) {
      $content = $element['top']['paragraph_summary']['fields_info']['#summary']['content'];
      $element['top']['paragraph_summary']['fields_info']['#summary']['content'] = isset($content[0]) ? [$content[0]] : [];
    }
  }
}

/**
 * Remove disabled views from views reference select options.
 */
function views_reference_remove_disabled_views(&$views_list) {
  $views_ids = array_keys($views_list);
  $views = Drupal::service('entity_type.manager')->getStorage('view')
    ->loadMultiple($views_ids);
  if (!empty($views)) {
    foreach ($views as $view_id => $view) {
      if (!$view->status()) {
        unset($views_list[$view_id]);
      }
    }
  }
}

/**
 * Get enabled display views reference custom ajax submit.
 */
function views_reference_get_enabled_displays(array &$form, FormStateInterface $form_state) {
  $trigger = $form_state->getTriggeringElement();
  $field_value = NestedArray::getValue($form_state->getValues(), $trigger['#parents']);

  // Get the value for the target id of the View.
  $view_id = $field_value;

  // Change the display_id field options.
  $display_id_field_path = array_slice($trigger['#array_parents'], 0, -1);
  array_push($display_id_field_path, 'display_id');
  $display_id_field = NestedArray::getValue($form, $display_id_field_path);
  $display_element_id = implode('_', array_slice($trigger['#parents'], 0, -3));
  $view = Drupal::service('entity_type.manager')->getStorage('view')
    ->load($view_id);
  $options = [];
  if ($view) {
    foreach ($view->get('display') as $display) {
      if ((!isset($display['display_options']['enabled']) || $display['display_options']['enabled']) && $display['display_plugin'] === 'page') {
        $options[$display['id']] = $display['display_title'];
      }
    }
  }
  array_unshift($options, '- Select -');
  $display_id_field['#options'] = $options;
  $display_id_field['#required'] = TRUE;
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('#' . $display_element_id, \Drupal::service('renderer')->render($display_id_field)));
  return $response;
}
